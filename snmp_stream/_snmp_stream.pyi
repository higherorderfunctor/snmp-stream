from typing import Iterator, Optional, Sequence, Text, Tuple, Union

import numpy as np

class ObjectIdentity:
    def __init__(self, oid: Optional[Sequence[int]] = None) -> None: ...
    def is_root_of(self, other: ObjectIdentity) -> ObjectIdentity: ...
    def __add__(self, other: ObjectIdentity) -> ObjectIdentity: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __lt__(self, other: ObjectIdentity) -> bool: ...
    def __le__(self, other: ObjectIdentity) -> bool: ...
    def __gt__(self, other: ObjectIdentity) -> bool: ...
    def __ge__(self, other: ObjectIdentity) -> bool: ...
    def __iter__(self) -> Iterator[int]: ...
    def __getitem__(self, index: int) -> int: ...
    def __len__(self) -> int: ...

class ObjectIdentityRange:
    start: Optional[ObjectIdentity]
    stop: Optional[ObjectIdentity]
    def __init__(self, start: Optional[ObjectIdentity] = None, stop: Optional[ObjectIdentity] = None) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __lt__(self, other: ObjectIdentity) -> bool: ...
    def __le__(self, other: ObjectIdentity) -> bool: ...
    def __gt__(self, other: ObjectIdentity) -> bool: ...
    def __ge__(self, other: ObjectIdentity) -> bool: ...

class Community:
    class Version:
        V1: 'Community.Version'
        V2C: 'Community.Version'
    string: Text
    version: Version
    def __init__(self, string: Text, version: Version) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class Config:
    retries: Optional[int]
    timeout: Optional[int]
    max_response_var_binds_per_pdu: Optional[int]
    max_async_sessions: Optional[int]
    def __init__(self, retires: Optional[int], timeout: Optional[int], max_reponse_var_binds_per_pdu: Optional[int], max_async_sessions: Optional[int]) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

def test_ambiguous_root_oids(oids: Sequence[ObjectIdentity]) -> Optional[Tuple[ObjectIdentity, ObjectIdentity]]: ...

class SnmpRequest:
    class SnmpRequestType:
        GET_REQUEST: 'SnmpRequest.SnmpRequestType'
        WALK_REQUEST: 'SnmpRequest.SnmpRequestType'
    type: SnmpRequestType
    host: Text
    community: Community
    oids: Sequence[ObjectIdentity]
    ranges: Optional[Sequence[ObjectIdentityRange]]
    req_id: Optional[Text]
    config: Optional[Config]
    def __init__(self, type: SnmpRequestType, host: Text, communities: Community, oids: Sequence[ObjectIdentity], ranges: Optional[Sequence[ObjectIdentityRange]] = None, req_id: Optional[Text] = None, config: Config = None) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class SnmpError:
    class SnmpErrorType:
        SESSION_ERROR: 'SnmpError.SnmpErrorType'
        CREATE_REQUEST_PDU_ERROR: 'SnmpError.SnmpErrorType'
        SEND_ERROR: 'SnmpError.SnmpErrorType'
        BAD_RESPONSE_PDU_ERROR: 'SnmpError.SnmpErrorType'
        TIMEOUT_ERROR: 'SnmpError.SnmpErrorType'
        ASYNC_PROBE_ERROR: 'SnmpError.SnmpErrorType'
        TRANSPORT_DISCONNECT_ERROR: 'SnmpError.SnmpErrorType'
        CREATE_RESPONSE_PDU_ERROR: 'SnmpError.SnmpErrorType'
        VALUE_WARNING: 'SnmpError.SnmpErrorType'
    type: SnmpErrorType
    request: SnmpRequest
    sys_errno: Optional[int]
    snmp_errno: Optional[int]
    err_stat: Optional[int]
    err_index: Optional[int]
    err_oid: Optional[ObjectIdentity]
    message: Optional[Text]
    def __init__(self, type: SnmpErrorType, request: SnmpRequest, sys_errno: Optional[int] = None, snmp_errno: Optional[int] = None, err_stat: Optional[int] = None, err_index: Optional[int] = None, err_oid: Optional[int] = None, message: Optional[Text] = None) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class SnmpResponse:
    class SnmpResponseType:
        SUCCESSFUL: 'SnmpResponse.SnmpResponseType'
        DONE_WITH_ERRORS: 'SnmpResponse.SnmpResponseType'
        FAILED: 'SnmpResponse.SnmpResponseType'
    type: SnmpResponseType
    request: SnmpRequest
    results: np.ndarray
    errors: Sequence[SnmpError]
    def __init__(self, type: SnmpResponseType, request: SnmpRequest, results: np.ndarray, errors: Sequence[SnmpError]) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...

class SessionManager:
    config: Config
    def __init__(self, config: Optional[Config] = None) -> None: ...
    def add_request(self, request: SnmpRequest) -> None: ...
    def run(self) -> Optional[Sequence[SnmpResponse]]: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
